// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  idNumber           String            @unique //13 digits
  firstName          String
  lastName           String
  dob                String
  age                String?
  bloodType          String
  username           String            @unique
  email              String            @unique
  password           String
  role               String            @default("user") // user, admin, doctor
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  appointments       Appointment[]
  emergencyContact   EmergencyContact? @relation(fields: [emergencyContactId], references: [id])
  emergencyContactId Int?
}

model EmergencyContact {
  id           Int      @id @default(autoincrement())
  contactName  String?
  relationship String?
  contactPhone String?
  contactEmail String?
  patient      User     @relation(fields: [patientId], references: [id])
  patientId    Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User[]
}

model Doctor {
  id             Int             @id @default(autoincrement())
  firstName      String
  lastName       String
  specialty      String
  email          String          @unique
  phoneNumber    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  availableTimes AvailableTime[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  patient   User     @relation(fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  date      DateTime
  reason    String
  status    String   @default("scheduled") // scheduled, completed, cancelled
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model AvailableTime {
  id        Int      @id @default(autoincrement())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  eventDates  String
  image       String?
  place       String
  website     String?
  organizer   String
  phone       String
  email       String
  linkedin    String?
  description String
}
